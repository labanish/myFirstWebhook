/// <reference types="express" />
/// <reference types="node" />
import { MiddlewareAbstract, express, IServiceInstance } from './abstract';
/**
 * concentrated parser middleware options
 */
export interface IParserMiddlewareOptions {
    /** urlencoded content type parsing */
    urlencoded?: boolean | object;
    /** json body parsing configuration */
    json?: boolean | object;
    /** body size limit */
    limit?: string;
    /** body-parser verification callback */
    verify?: (req: express.Request, res: express.Request, buf: Buffer, encoding: string) => void;
}
/**
 * extended request object with raw properties
 */
export interface IParsedRequest extends express.Request {
    rawBody: Buffer;
    encoding: string;
}
/**
 * Body parser middleware
 */
export declare class ParserMiddleware extends MiddlewareAbstract {
    protected _init(service: IServiceInstance, options: IParserMiddlewareOptions): void;
    /**
     * add/replace parser to the application or router stack.
     * @param service - application or router layer to add
     * @param parser - body parser middleware
     */
    private _addParser;
    /**
     * get common options object
     */
    private _commonOptions;
    /**
     * get final parser options by combining defaults with user-defined opts
     * @param {object} defaults - parser default options
     * @param {*} opts - user defined options
     */
    private _getOptions;
}
