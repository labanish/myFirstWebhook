import * as express from 'express';
import { ILogger } from '../common/definitions';
export { express };
export declare type IServiceInstance = express.Application | express.Router;
export interface IStaticMiddlwareAbstract {
    extend(service: IServiceInstance, options?: any): any;
    new (service: IServiceInstance, options: any): MiddlewareAbstract;
}
export interface IParsedRequest extends express.Request {
    body: any;
}
/**
 * interface for extended request object in OMCe
 * @see https://docs.oracle.com/en/cloud/paas/mobile-suite/develop/calling-apis-custom-code.html
 */
export interface IMobileCloudRequest extends IParsedRequest {
    oracleMobile?: {
        [service: string]: {
            [method: string]: Function;
        };
    };
}
/**
 * Embedded middleware abstraction layer.
 */
export declare abstract class MiddlewareAbstract {
    protected options?: any;
    protected _logger: ILogger;
    protected _service: IServiceInstance;
    /**
     * static getter for class constructor
     */
    private static readonly ctor;
    /**
     * extend static method. Instantiate the middleware class.
     * @param service: express.Router - main namespace router.
     * @param options: any - Channel specific middleware options.
     * @return instantiated class.
     */
    static extend(service: IServiceInstance, options?: any): MiddlewareAbstract;
    constructor(service: IServiceInstance, options?: any);
    /**
     * abstract _init. to be implemented by implementation classes.
     * @param service: application service router
     * @param options: any channel specific middleware options.
     */
    protected abstract _init(service: IServiceInstance, options: any): void;
}
